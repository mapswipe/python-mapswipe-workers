name: MapSwipe Workers

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      working-directory: ./mapswipe_workers
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black==22.3.0 isort
    - name: Code style
      working-directory: ./mapswipe_workers
      run: |
        black --check mapswipe_workers ../django
        flake8 --count --config setup.cfg mapswipe_workers/ ../django/
        isort --check --settings-file setup.cfg mapswipe_workers/ ../django/
    - name:  Setup Postgres Database Container
      env:
        POSTGRES_PASSWORD: test
        POSTGRES_USER: test
        POSTGRES_DB: test
      run: |
        # Create a mock file for wal-g setup
        touch postgres/serviceAccountKey.json
        docker-compose up --build --detach postgres
    - name: Deploy Firebase Rules and Functions
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        FIREBASE_DB: ${{ secrets.FIREBASE_DB }}
      run: |
        docker-compose run firebase_deploy sh -c "firebase use $FIREBASE_DB && firebase deploy --token $FIREBASE_TOKEN --only database"
    - name: Decrypt Service Account Key File
      working-directory: ./
      run: |
        openssl enc -aes-256-cbc -d -K "$OPENSSL_KEY" -iv "$OPENSSL_IV" -in ci-mapswipe-firebase-adminsdk-80fzw-ebce84bd5b.json.enc -out mapswipe_workers/serviceAccountKey.json
      env:
        OPENSSL_PASSPHRASE: ${{ secrets.OPENSSL_PASSPHRASE }}
        OPENSSL_KEY: ${{ secrets.OPENSSL_KEY }}
        OPENSSL_IV: ${{ secrets.OPENSSL_IV }}
    - name: Run Tests
      working-directory: ./mapswipe_workers
      env:
        FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        FIREBASE_DB: ${{ secrets.FIREBASE_DB }}
        POSTGRES_PASSWORD: test
        POSTGRES_USER: test
        POSTGRES_DB: test
        OSMCHA_API_KEY: ${{ secrets.OSMCHA_API_KEY }}
      run: |
        docker-compose run mapswipe_workers_creation python -m unittest discover --verbose --start-directory tests/unittests/
        docker-compose run mapswipe_workers_creation python -m unittest discover --verbose --start-directory tests/integration/
